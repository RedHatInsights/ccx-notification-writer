# Copyright 2021 Red Hat, Inc
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


---
apiVersion: v1
kind: Template
metadata:
  name: ccx-notification-writer
objects:

- kind: HorizontalPodAutoscaler
  apiVersion: autoscaling/v1
  metadata:
    labels:
      app: ccx-data-pipeline
    name: ccx-notification-writer
  spec:
    minReplicas: ${{MIN_REPLICAS}}
    maxReplicas: ${{MAX_REPLICAS}}
    scaleTargetRef:
      apiVersion: apps/v1
      kind: Deployment
      name: ccx-notification-writer-instance
    targetCPUUtilizationPercentage: 80

- apiVersion: cloud.redhat.com/v1alpha1
  kind: ClowdApp
  metadata:
    name: ccx-notification-writer
    annotations:
      ignore-check.kube-linter.io/minimum-three-replicas: "This app doesn't have that much traffic"
  spec:
    envName: ${ENV_NAME}
    dependencies:
      - notifications-backend
      - notifications-engine
    testing:
      iqePlugin: ccx
    deployments:
      - name: instance
        minReplicas: ${{MIN_REPLICAS}}
        webServices:
          public:
            enabled: false
          private:
            enabled: false
          metrics:
            enabled: true
        podSpec:
          initContainers:
            - name: execute-migrations
              image: ${IMAGE}:${IMAGE_TAG}
              command:
                - /bin/sh
                - '-c'
                - >-
                  ./ccx-notification-writer --db-init-migration;
                  ./ccx-notification-writer --db-init;
                  ./ccx-notification-writer --migrate ${DB_MIGRATION_VERSION};
              env:
              - name: CCX_NOTIFICATION_WRITER__BROKER__ADDRESSES
                value: ${KAFKA_BOOTSTRAP_HOST}:${KAFKA_BOOTSTRAP_PORT}
              - name: CCX_NOTIFICATION_WRITER__BROKER__TOPIC
                value: ${INCOMING_TOPIC}
              - name: CCX_NOTIFICATION_WRITER__BROKER__GROUP
                value: ${GROUP_ID}
              - name: CCX_NOTIFICATION_WRITER__BROKER__ENABLED
                value: 'false'
              - name: CCX_NOTIFICATION_WRITER__STORAGE__DB_DRIVER
                value: postgres
              - name: CCX_NOTIFICATION_WRITER__STORAGE__PG_PARAMS
                value: ${PG_PARAMS}
              - name: CCX_NOTIFICATION_WRITER__STORAGE__LOG_SQL_QUERIES
                value: 'true'
              - name: CCX_NOTIFICATION_WRITER__LOGGING__DEBUG
                value: 'true'
              - name: CCX_NOTIFICATION_WRITER__LOGGING__LEVEL
                value: ''
              - name: CCX_NOTIFICATION_WRITER__METRICS__NAMESPACE
                value: ${METRICS_NAMESPACE}
              - name: CCX_NOTIFICATION_WRITER__METRICS__ADDRESS
                value: :8080
              resources:
                limits:
                  cpu: ${CPU_LIMIT}
                  memory: ${MEMORY_LIMIT}
                requests:
                  cpu: ${CPU_REQUEST}
                  memory: ${MEMORY_REQUEST}
              # End of initContainer
          image: ${IMAGE}:${IMAGE_TAG}
          readinessProbe:
            httpGet:
              path: /metrics
              port: 8080
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /metrics
              port: 8080
            failureThreshold: 1
            periodSeconds: 10
          startupProbe:
            httpGet:
              path: /metrics
              port: 8080
            # Wait for 10x10 seconds
            failureThreshold: 10
            periodSeconds: 10
          resources:
            limits:
              cpu: ${CPU_LIMIT}
              memory: ${MEMORY_LIMIT}
            requests:
              cpu: ${CPU_REQUEST}
              memory: ${MEMORY_REQUEST}
          env:
            - name: CCX_NOTIFICATION_WRITER__BROKER__ADDRESSES
              value: ${KAFKA_BOOTSTRAP_HOST}:${KAFKA_BOOTSTRAP_PORT}
            - name: CCX_NOTIFICATION_WRITER__BROKER__TOPIC
              value: ${INCOMING_TOPIC}
            - name: CCX_NOTIFICATION_WRITER__BROKER__GROUP
              value: ${GROUP_ID}
            - name: CCX_NOTIFICATION_WRITER__BROKER__ENABLED
              value: 'true'
            - name: CCX_NOTIFICATION_WRITER__STORAGE__DB_DRIVER
              value: postgres
            - name: CCX_NOTIFICATION_WRITER__STORAGE__PG_PARAMS
              value: ${PG_PARAMS}
            - name: CCX_NOTIFICATION_WRITER__STORAGE__LOG_SQL_QUERIES
              value: 'true'
            - name: CCX_NOTIFICATION_WRITER__LOGGING__DEBUG
              value: 'true'
            - name: CCX_NOTIFICATION_WRITER__LOGGING__LEVEL
              value: ''
            - name: CCX_NOTIFICATION_WRITER__METRICS__NAMESPACE
              value: ${METRICS_NAMESPACE}
            - name: CCX_NOTIFICATION_WRITER__METRICS__ADDRESS
              value: :8080
            - name: CCX_NOTIFICATION_WRITER__LOGGING__LOGGING_TO_CLOUD_WATCH_ENABLED
              value: ${LOGGING_TO_CLOUD_WATCH_ENABLED}
            - name: CCX_NOTIFICATION_WRITER__CLOUDWATCH__DEBUG
              value: ${CLOUDWATCH_DEBUG}
            - name: CCX_NOTIFICATION_WRITER__CLOUDWATCH__STREAM_NAME
              value: ${IRSP_LOG_STREAM}
            - name: CCX_NOTIFICATION_WRITER__CLOUDWATCH__CREATE_STREAM_IF_NOT_EXISTS
              value: ${CREATE_STREAM_IF_NOT_EXISTS}
            - name: CCX_NOTIFICATION_WRITER__CLOUDWATCH__AWS_REGION
              valueFrom:
                secretKeyRef:
                  name: cloudwatch
                  key: aws_region
                  optional: true
            - name: CCX_NOTIFICATION_WRITER__CLOUDWATCH__LOG_GROUP
              valueFrom:
                secretKeyRef:
                  name: cloudwatch
                  key: log_group_name
                  optional: true
            - name: CCX_NOTIFICATION_WRITER__CLOUDWATCH__AWS_ACCESS_ID
              valueFrom:
                secretKeyRef:
                  name: cloudwatch
                  key: aws_access_key_id
                  optional: true
            - name: CCX_NOTIFICATION_WRITER__CLOUDWATCH__AWS_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: cloudwatch
                  key: aws_secret_access_key
                  optional: true

    database:
      # the DB name should match to app-interface DB name without specifying environment
      name: ccx-notification-db
      version: 16
    kafkaTopics:
      - topicName: ${INCOMING_TOPIC}
        partitions: 1
        replicas: 3

# Expose Prometheus metrix
- kind: Service
  apiVersion: v1
  metadata:
    annotations:
      prometheus.io/path: ${IRDW_API_PREFIX}metrics
      prometheus.io/port: '8080'
      prometheus.io/scheme: http
      prometheus.io/scrape: 'true'
    name: ccx-notification-writer-prometheus-exporter
    labels:
      app: ccx-notification-writer
  spec:
    ports:
      - name: ccx-notification-writer-metrics-port
        port: 8080
        protocol: TCP
        targetPort: 8080
    selector:
      app: ccx-notification-writer
    sessionAffinity: None
    type: ClusterIP

# Expose Postgresql
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: Exposes the database server
    name: ${DATABASE_SERVICE_NAME}
  spec:
    ports:
    - name: postgresql
      port: 5432
      targetPort: 5432
    selector:
      app: ${DATABASE_SERVICE_NAME}


parameters:
# general params
- description: Image name
  name: IMAGE
  value: quay.io/cloudservices/ccx-notification-writer
- description: Image tag
  name: IMAGE_TAG
  required: true
- description: Determines Clowder deployment
  name: CLOWDER_ENABLED
  value: "true"
- description: Env Name
  name: ENV_NAME
  required: true
- description: Minimum number of pods to use when autoscaling is enabled
  name: MIN_REPLICAS
  value: '1'
- description: Maximum number of pods to use when autoscaling is enabled
  name: MAX_REPLICAS
  value: '1'
- name: CPU_LIMIT
  value: 500m
- description: memory limit of service
  name: MEMORY_LIMIT
  value: 512Mi
- name: CPU_REQUEST
  value: 100m
- description: memory request of service
  name: MEMORY_REQUEST
  value: 256Mi
- name: DATABASE_SERVICE_NAME
  required: true
  value: ccx-notification-db
- name: IRDW_API_PREFIX
  required: true
  value: /
- name: KAFKA_BOOTSTRAP_HOST
  required: true
  value: mq-kafka
- name: KAFKA_BOOTSTRAP_PORT
  required: true
  value: '29092'
- name: INCOMING_TOPIC
  required: true
  value: ccx.ocp.results
- name: GROUP_ID
  required: true
  value: ccx_notification_app
- name: METRICS_NAMESPACE
  value: ccx_notification_writer
- name: DB_MIGRATION_VERSION
  value: latest
- name: PG_PARAMS
  value: sslmode=require
# cloudwatch
- name: LOGGING_TO_CLOUD_WATCH_ENABLED
  value: "false"
  required: true
- name: CLOUDWATCH_DEBUG
  value: "false"
  required: true
- name: IRSP_LOG_STREAM
  value: $HOSTNAME
- name: CREATE_STREAM_IF_NOT_EXISTS
  value: "true"
